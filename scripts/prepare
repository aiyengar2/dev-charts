#!/usr/bin/env bash
set -e

# rebase the patch with upsteam charts defined in package.yaml. Make sure patches still apply
# for the latest upsteam charts. If there is conflits commiter should solve it.

function init_charts_crd_dir() {
	if [[ -z $1 ]]; then
	  echo "No directory provided to initialize charts-crd within"
	  return
	fi
	if [[ -d ${f}/charts-crd ]]; then
		rm -rf ${f}/charts-crd
	fi
	if ! [[ -d ${f}/charts ]]; then
		echo "Could not find ${f}/charts"
		return
	fi
	if ! [[ -f ${f}/charts/Chart.yaml ]]; then
		echo "Could not find ${f}/charts/Chart.yaml"
		return
	fi
	if ! [[ -d ${f}/charts/crds ]]; then
		echo "Chart does not have any crds within a crd/ directory"
		return
	fi
	f=$1
	# Create directory and move CRDs
	mkdir -p ${f}/charts-crd/templates
	mv ${f}/charts/crds/* ${f}/charts-crd/templates
	rm -rf ${f}/charts/crds
	# Collect information on chart
	name=$(cat ${f}/charts/Chart.yaml | yq r - 'name')
	api_version=$(cat ${f}/charts/Chart.yaml | yq r - 'apiVersion')
	chart_version=$(cat ${f}/charts/Chart.yaml | yq r - 'version')
	namespace=$(cat ${f}/charts/Chart.yaml | yq r - 'annotations[catalog.rancher.io/namespace]')
	release_name=$(cat ${f}/charts/Chart.yaml | yq r - 'annotations[catalog.rancher.io/release-name]')
	# Collect information on CRDs and update the files to remove Helm 2 hooks
	crds=()
	for crd_yaml in ${f}/charts-crd/templates/*; do
		crd_group=$(cat ${crd_yaml}| yq r - 'spec.group')
		crd_version=$(cat ${crd_yaml}| yq r - 'spec.version')
		crd_kind=$(cat ${crd_yaml}| yq r - 'spec.names.kind')
		crds+=("${crd_group}/${crd_version}/${crd_kind}")
	done
	# Init Chart.yaml for CRD chart
	cat << EOF > ${f}/charts-crd/Chart.yaml
apiVersion: ${api_version}
version: ${chart_version}
annotations:
  catalog.rancher.io/certified: rancher
  catalog.rancher.io/namespace: ${namespace}
  catalog.rancher.io/release-name: ${release_name}-crd
description: A Rancher chart that creates ${name} CRDs within a cluster.
name: ${name}-crd
type: application
EOF
	# Init README.yaml for CRD chart
	cat << EOF > ${f}/charts-crd/README.md
# ${name}-crd
A Rancher chart that installs the CRDs used by [${name}](https://github.com/rancher/dev-charts/tree/master/packages/${name}).
EOF
	# Copy a YAML that triggers a failure on the original chart if the CRDs that are copied don't exist
	cat << EOF > ${f}/charts/templates/validate-install-${name}-crd.yaml
# {{- \$found := dict -}}
$(
for crd in ${crds[@]}; do
echo "# {{- set \$found \"${crd}\" false -}}"
done
)
# {{- range .Capabilities.APIVersions -}}
# {{- if hasKey \$found (toString .) -}}
# 	{{- set \$found (toString .) true -}}
# {{- end -}}
# {{- end -}}
# {{- range \$_, \$exists := \$found -}}
# {{- if (eq \$exists false) -}}
# 	{{- required "Required CRDs are missing. Please install the ${name}-crd chart before installing this chart." "" -}}
# {{- end -}}
# {{- end -}}
EOF
}

for f in packages/*; do
  if [[ -f ${f}/package.yaml ]]; then
  	if [[ -z $CHART || $CHART == $(basename -- ${f}) ]]; then
			url=$(cat ${f}/package.yaml | yq r - url)
			subdirectory=$(cat ${f}/package.yaml | yq r - subdirectory)
			type=$(cat ${f}/package.yaml | yq r - type)
			fields=$(echo ${subdirectory} | awk -F'/' '{print NF}')
			commit=$(cat ${f}/package.yaml | yq r - commit)
			if [[ $fields -eq '0' ]]; then
				fields='1'
			fi
			rm -rf ${f}/charts
			mkdir -p ${f}/charts
			if [[ $type == 'git' ]]; then
				mkdir -p /tmp/tmp-charts
				git clone $url /tmp/tmp-charts
				pwd=$(pwd)
				cd /tmp/tmp-charts
				git checkout $commit
				cd $pwd
				rm -rf ${f}/charts
				cp -r /tmp/tmp-charts/${subdirectory} ${f}/charts
				rm -rf /tmp/tmp-charts
			else
				curl -sLf ${url} | tar xvzf - -C ${f}/charts --strip ${fields} ${subdirectory} > /dev/null 2>&1
			fi
			for file in $(find ./${f} -type f -name "*.patch"); do
				basename=$(basename -- ${file})
				patch -E -p3 -d ${f}/charts < ${f}/$basename
			done
			split_crds=$(cat ${f}/package.yaml | yq r - splitCRDsIntoSeparatePackage)
			if [[ "${split_crds}" == "true" ]]; then
				init_charts_crd_dir ${f}
			fi
			copied_dependencies=()
			if [[ -f ${f}/charts/requirements.yaml ]]; then
				repos=$(cat ${f}/charts/requirements.yaml | yq r - "dependencies.*.repository")
				while IFS= read -r repo; do
					if [[ ${repo} == file://* ]]; then
						charts_path=${repo/file:\/\//${f}/charts/}
						overlay_path=${repo/file:\/\//${f}/overlay/}
						if [[ ! -d $charts_path ]] && [[ -d $overlay_path ]]; then
							cp -R $overlay_path $charts_path
							copied_dependencies+=("${charts_path}")
						fi
					fi
				done < <(echo "${repos}")
			fi
			pwd=$(pwd)
			cd ${f}/charts
			helm dependency update
			cd $pwd
			for dep in "${copied_dependencies[@]}"; do
				rm -rf $dep
			done
		fi
  fi
done